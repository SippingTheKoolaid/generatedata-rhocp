apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: mysql
      primary: generate_data
    name: mysql
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mysql
    template:
      metadata:
        labels:
          app: mysql
      spec:
        containers:
        - env:
          - name: MYSQL_ROOT_PASSWORD
            value: 5R2TO8AR
          - name: MYSQL_DATABASE
            value: generatedata
          - name: MYSQL_USER
            value: user1
          - name: MYSQL_PASSWORD
            value: O54MAPC8
          image: registry.redhat.io/rhel8/mysql-80
          name: mysql
          ports:
          - containerPort: 3306
          volumeMounts:
          - hostPath: /
            mountPath: /var/lib/mysql/data
            name: mysql-data
        volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-2-pvc
        imagePullSecrets:
        - name: 13162754-klm-ibm-pull-secret
- apiVersion: v1
  data:
    default.conf: |
      server {
      listen 8081 default;
      server_name $HOSTNAME;

      client_max_body_size 108M;

      access_log /tmp/application.access.log;

      proxy_intercept_errors on;
      fastcgi_intercept_errors on;

      root /application;

      index index.php index.html index.htm;

      location / {
          try_files $uri $uri/ /index.html;
      }

      gzip on;
      gzip_types text/plain text/javascript application/x-javascript text/css application/javascript application/json image/svg+xml;

      gzip_comp_level 9;
      etag on;

      location /index.html {
          add_header Cache-Control no-cache;
      }

      location /graphql {
          proxy_pass http://$HOSTNAME:3001;
      }

      #  if (!-e $request_filename) {
      #      rewrite ^.*$ /index.php last;
      #  }

      location ~ \.php$ {
          fastcgi_split_path_info ^(.+\.php)(/.+)$;
          fastcgi_pass php-fpm:9000 ;
          fastcgi_index index.php ;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name ;
          fastcgi_param PHP_VALUE error_log=/tmp/application_php_errors.log ;
          fastcgi_buffers 16 128k ;
          fastcgi_buffer_size 128k ;
          fastcgi_read_timeout 300s ;
          include fastcgi_params ;
      }

      }
    nginx-test.conf: |
      worker_processes 1 ;
      pid /tmp/nginx.pid ;

      events {
        worker_connections 1024 ;
      }

      http {
        client_body_temp_path /tmp/client_temp ;
        proxy_temp_path       /tmp/proxy_temp_path ;
        fastcgi_temp_path     /tmp/fastcgi_temp ;
        uwsgi_temp_path       /tmp/uwsgi_temp ;
        scgi_temp_path        /tmp/scgi_temp ;

        include mime.types ;
        default_type application/octet-stream ;

        log_format fmt '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       '$request_time $upstream_response_time $pipe $upstream_cache_status' ;

        access_log /tmp/access.log fmt ;
        error_log /tmp/error.log warn ;

        keepalive_timeout 30 ;

        server {
          listen 8081 ;
          server_name _ ;

          sendfile off ;

          index index.php index.html ;

          location / {
            root /application ;
            proxy_http_version 1.1 ;
          }

          location ~ (\.php|/api/v1/data)$ {
            rewrite ^/api/v1/(.*)$ api/process.php?request=$1 break ;
            fastcgi_pass  ${PHP_FPM_SERVICE_HOST}:9000 ;
            fastcgi_index index.php ;
            fastcgi_param PATH_INFO $fastcgi_script_name ;
            fastcgi_param SCRIPT_FILENAME /application/$fastcgi_script_name ;
            include       /etc/nginx/fastcgi_params ;
            proxy_http_version 1.1 ;
          }

          location ~ /\. {
            access_log off;
            log_not_found off;
            deny all;
          }
        }
      }

    nginx.conf: |
      worker_processes  auto;

      error_log  /tmp/error.log debug;
      pid        /tmp/nginx.pid;

      events {
          worker_connections  2048;
      }

      http {

          client_body_temp_path /tmp/client_temp;
          proxy_temp_path       /tmp/proxy_temp_path;
          fastcgi_temp_path     /tmp/fastcgi_temp;
          uwsgi_temp_path       /tmp/uwsgi_temp;
          scgi_temp_path        /tmp/scgi_temp;

          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /tmp/access.log  main;

          sendfile        on;

          keepalive_timeout  300 ;
          proxy_connect_timeout 300 ;
          proxy_send_timeout 300 ;
          proxy_read_timeout 300 ;
          fastcgi_send_timeout 300 ;
          fastcgi_read_timeout 300 ;

          proxy_http_version 1.1;

          include /etc/nginx/conf.d/*.conf;
      }
    settings.php: |
      <?php

      /**
       * This file contains an example of what your settings.php file should contain. The installation script will
       * in most cases automatically create this file, but worst-case scenario (no permissions, for example) it will
       * at least generate the file content so you can create it yourself.
       */
      $dbHostname     = 'mysql';
      $dbName         = 'generatedata';
      $dbUsername     = 'user1';
      $dbPassword     = 'O54MAPC8';
      $dbTablePrefix  = 'gd_';
      $encryptionSalt = 'ABC'; // any 3 A-Z chars
      $apiEnabled     = true;
      $importSqlFeatureEnabled = true;
      $importSqlListDatabases = false;
  kind: ConfigMap
  metadata:
    name: nginx-config
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: php-config
  data:
    php.ini: |
        error_reporting = E_ALL
        display_errors = Off
        display_startup_errors =  Off
        log_errors = On
        error_log = /tmp/php-application-error
        log_errors_max_len = 2048
        ignore_repeated_errors = Off
        expose_php = off
        memory_limit = 512M
        max_execution_time = 300
    php-fpm.conf: |
        [www]
        pm.status_path = /tmp/fpm-status
        pm.max_children = 250
        pm.process_idle_timeout = 300s
        pm.max_requests = 1500
        clear_env = no
        security.limit_extensions =
        request_terminate_timeout = 5m
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: php-fpm
      primary: generate_data
    name: php-fpm
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: php-fpm
    template:
      metadata:
        labels:
          app: php-fpm
      spec:
        containers:
        - image: registry.redhat.io/codeready-workspaces/stacks-php-rhel8  #bitnami/php-fpm:7.4
          name: php-fpm
          ports:
          - containerPort: 9000
          volumeMounts:
          - hostPath: /
            mountPath: /application
            name: nfs-volume
          - mountPath: /opt/app-root/etc/php.ini
            name: load-php-ini
            subPath: php.ini
          - mountPath: /opt/app-root/etc/conf.d/php-fpm.conf
            name: load-php-fpm
            subPath: php-fpm.conf
#        initContainers:
#        - command:
#          - /bin/bash
#          - -c
#          - |
#            echo "updating www.conf"
#            sed -e 's/;request_terminate_timeout = 0/request_terminate_timeout = 5m/g' /opt/bitnami/php/etc/php-fpm.d/www.conf > /configs/www.conf
#            echo "updating php.ini"
#            sed -e 's/max_execution_time = 30/max_execution_time = 300/g' /opt/bitnami/php/etc/php.ini > /configs/php.ini
#            sed -e 's/memory_limit = 128M/memory_limit = 256M/g' -i /configs/php.ini
#            cd /
#            if [ -n "$(ls -A /generatedata-3.4.1 2>/dev/null)" ] 
#            then 
#              echo "Files exist, no download needed" 
#            else
#              echo "No files on shared volume, retrieving v3.4.1 from github"
#              wget https://github.com/benkeen/generatedata/archive/refs/tags/3.4.1.tar.gz
#              tar -xvf 3.4.1.tar.gz
#              echo "Settings shared volume files to read/execute for everyone"
#              chmod -v 777 /generatedata-3.4.1
#              echo "Setting shared volume cache directory to read/write/execute for everyone"
#              chmod -Rv 777 /generatedata-3.4.1/cache
#            fi
#          image: registry.redhat.io/ubi8/php-73   # bitnami/php-fpm:7.4
#          name: updateconf
#          volumeMounts:
#          - mountPath: /configs
#            name: php-config
#          - mountPath: /generatedata-3.4.1
#            name: nfs-volume
    #      - mountPath: /opt/bitnami/php/etc/php-fpm.conf
    #        name: load-php-fpm
    #        subPath: php-fpm.conf
    #      - mountPath: /opt/bitnami/php/etc/php.ini
    #        name: load-php-ini
    #        subPath: php.ini
        imagePullSecrets:
        - name: 13162754-klm-ibm-pull-secret
        volumes:
        - name: nfs-volume
          persistentVolumeClaim:
            claimName: webserver-pvc
#        - emptyDir: {}
#          name: php-config
        - configMap:
            items:
            - key: php.ini
              path: php.ini
            name: php-config
          name: load-php-ini 
        - configMap:
            items:
            - key: php-fpm.conf
              path: php-fpm.conf
            name: php-config
          name: load-php-fpm
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: webserver
      primary: generate_data
    name: webserver
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: webserver
    template:
      metadata:
        labels:
          app: webserver
      spec:
        containers:
        - image: nginx:alpine
          name: webserver
          ports:
          - containerPort: 8081
          volumeMounts:
          - hostPath: /
            mountPath: /application
            name: nfs-volume
          - mountPath: /etc/nginx/nginx.conf
            name: nginx-config
            subPath: nginx.conf
          - mountPath: /etc/nginx/conf.d
            name: default-config
        initContainers:
        - command:
          - /bin/sh
          - -c
          - |
            cd /app
            if [ -f "settings.php" ] 
            then 
              echo "settings.php file exists, it will not be updated" 
            else
              echo "settings.php missing, adding settings.php to shared volume for all containers to use"
              cp -fv /php/settings.php /app/settings.php
              chmod -Rv 755 /app/settings.php
            fi
          image: nginx:alpine
          name: updatephp
          volumeMounts:
          - hostPath: /
            mountPath: /app
            name: nfs-volume
          - mountPath: /php/settings.php
            name: php-settings
            subPath: settings.php
        volumes:
        - name: nfs-volume
          persistentVolumeClaim:
            claimName: webserver-pvc
        - emptyDir: {}
          name: update-php
        - configMap:
            items:
            - key: nginx.conf
              path: nginx.conf
            name: nginx-config
          name: nginx-config
        - configMap:
            items:
            - key: default.conf
              path: default.conf
            name: nginx-config
          name: default-config
        - configMap:
            items:
            - key: settings.php
              path: settings.php
            name: nginx-config
          name: php-settings
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: mysql
      primary: generate_data
    name: mysql
  spec:
    ports:
    - port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: mysql
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: php-fpm
      primary: generate_data
    name: php-fpm
  spec:
    ports:
    - port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: php-fpm
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: webserver
      primary: generate_data
    name: webserver
  spec:
    ports:
    - port: 8081
      protocol: TCP
      targetPort: 8081
    selector:
      app: webserver
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: webserver
      primary: generate_data
    annotations:
      haproxy.router.openshift.io/timeout: 300s
    name: webserver
  spec:
    host: generate-data.mycluster-dal10-b3-552823-32473ca4d3b4f0bf6716e23f5ecf4388-0000.us-south.containers.appdomain.cloud
    port:
      targetPort: 8081
    to:
      kind: Service
      name: webserver
      weight: 100
    wildcardPolicy: None
    tls:
      insecurEdgeTerminationPolicy: Allow
      termination: edge
kind: List
metadata: {}
